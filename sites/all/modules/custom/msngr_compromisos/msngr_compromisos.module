<?php

function msngr_compromisos_menu () {
  $items['productos/autocomplete'] = array(
    'title' => t('Autocomplete for products'),
    'page callback' => '_productos_autocomplete',
    'access arguments' => array('view published content'),  //MODIFICAR ESTO!!!! FALSE SOLO PARA PRUEBAS!!!!!!
    'type' => MENU_CALLBACK
  );
  return $items;
}

function _productos_autocomplete () {

    $result = db_select('field_data_field_productos_relacionados', 'ttd')
    ->fields('ttd', array('field_productos_relacionados_tid'))
    ->condition('entity_id', '%' . variable_get('meta') . '%', 'LIKE')
//    ->condition('name', '%' . db_like($string) . '%', 'LIKE')
    ->execute()
    ->fetchAll();
//

  foreach ($result as $k => $v) {

  $lol[$k]=$result[$k]->field_productos_relacionados_tid;
    $lol2[$k]=taxonomy_term_load($lol[$k]);
    $lol3[$k]=$lol2[$k]->name;
    $matches[$lol3[$k]]=check_plain($lol3[$k]);

  }

  drupal_json_output($matches);
}

/**
 * Implements hook_node_access().
 */
function msngr_compromisos_node_access($node, $op, $account) {
  if (!is_string($node) && in_array('user-institucional', $account->roles) && $op == 'update') {
    if($node->type == 'compromiso_de_gestion') {
      $user_entity = user_load($account->uid);
      return field_target_id($user_entity->field_institucion, 0) != field_target_id($node->field_institucion, 0) ? NODE_ACCESS_DENY : NODE_ACCESS_ALLOW;
    }

  }
}



function msngr_compromisos_form_evaluacion_de_metas_node_form_alter (&$form, &$form_state, $form_id) {

//  dpm($form);

}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function msngr_compromisos_form_compromiso_de_gestion_node_form_alter(&$form, &$form_state, $form_id) {
  variable_del('meta');
  global $user;

  $user_full = user_load($user->uid, TRUE);

  if (is_add_form($form_state) && in_array('usuario-institucional', $user->roles)) {
    auto_compromiso_form_title($user_full, $form, $form_state);
  }

  //Add css
  /*$form['#attached'] = array(
    'css' => array('sites/all/modules/custom/auto_fill_id/css/compromiso_form.css'),
  );*/

  //Compromiso de Gestión title disabled
  $form['title']['#disabled'] = TRUE;

  //Restrict access
  $form['field_porcentaje_de_avance_compr']['#access'] = FALSE;
  $form['field_year_compromiso']['#access'] = FALSE;
  $form['field_estado']['#access'] = FALSE;
  $form['field_id_compromiso']['#access']= FALSE;
  //
  $algo=$form['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_evaluar_producto'][LANGUAGE_NONE];
  foreach ($algo as $ki => $va) {

    if (is_numeric($ki)) {
      $form['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_evaluar_producto'][LANGUAGE_NONE][$ki]['field_producto'][LANGUAGE_NONE][0]['tid']['#autocomplete_path']='productos/autocomplete';

    }
  }

  $ajax_producto = array(
    'callback' => 'ajax_producto_callback',
    'method' => 'blur',
  );

  $form['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_meta_tax'][LANGUAGE_NONE][0]['tid']['#ajax']=$ajax_producto;
//dpm($form);
}

function ajax_producto_callback ($form, $form_state) {
  $commands = array();
  $meta_capturada=$form['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_meta_tax'][LANGUAGE_NONE][0]['tid']['#value'];
  $tax=taxonomy_get_term_by_name($meta_capturada, 'meta');
  $tax=array_shift($tax);
  variable_set('meta', $tax->tid);
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

function is_add_form($form_state){
  return !isset($form_state['node']->nid);
}

function auto_compromiso_form_title($user, &$form, &$form_state) {
  $ins_nid = field_target_id($user->field_institucion, 0);

  $ins = node_load($ins_nid);
  $form['field_institucion']['#disabled'] = TRUE;
  $form['field_institucion'][LANGUAGE_NONE][0]['target_id']['#default_value'] = t('@institution (@nid)', array('@institution' => $ins->title, '@nid' => $ins_nid));
  $form_state['values']['field_institucion'][LANGUAGE_NONE][0]['target_id'] = $ins_nid;
  $form['title']['#default_value'] = date('Y').'-'.$ins->title;
}













//  dpm('hola');
//$matches = array()array;
//  $result = db_select('taxonomy_term_data', 'ttd')
//            ->fields('ttd', array('name'))
//            ->condition('name', '%' . db_like($string) . '%', 'LIKE')
//
////    ->condition('')
//          ->execute();
///////////////////////////////////
//  $result = db_select('field_data_field_productos_relacionados', 'ttd')
//    ->fields('ttd', array('entity_id'))
//    ->condition('entity_id', '%' . db_like($string) . '%', 'LIKE')
//
////    ->condition('')
//    ->execute();
////////////////////////////////////
//  $str='SELECT taxonomy_term_data.tid AS tid, \'taxonomy_term\' AS field_data_field_productos_relacionados_taxonomy_term_entity
//FROM
//{taxonomy_term_data} taxonomy_term_data
//LEFT JOIN {taxonomy_vocabulary} taxonomy_vocabulary ON taxonomy_term_data.vid = taxonomy_vocabulary.vid
//WHERE (( (taxonomy_vocabulary.machine_name IN  (\'meta\')) AND (taxonomy_term_data.name ILIKE \'%meta 2%\') ))
//LIMIT 10 OFFSET 0';
//  $pri='1258';
/////////////////////////////

//keyed
//associa
// save the query to matches
//  foreach ($result as $row) {
//    $matches[$row->field_productos_relacionados_tid] = check_plain($row->field_productos_relacionados_tid);
//  }
/*if($node->type == 'meta') {
  $compromisos = get_compromiso_by_meta($node->nid);
  foreach ($compromisos as $compromiso) {
    $compromiso_node = node_load($compromiso->nid);
    $user_entity = user_load($account->uid);
    return field_target_id($user_entity->field_institucion, 0) != field_target_id($compromiso_node->field_institucion, 0) ? NODE_ACCESS_DENY : NODE_ACCESS_ALLOW;
  }
}

if($node->type == 'producto_meta' && isset($node->entity_view_prepared)) {
  return NODE_ACCESS_DENY;
}*/
/*
 * Implements hook_theme_registry_alter().
 */
/*function msngr_compromisos_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'auto_fill_id');
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  foreach ($template_file_objects as $key => $template_file) {
    if(!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}*/
//  dpm($form['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_meta_tax'][LANGUAGE_NONE][0]['tid']);
//  dpm($form);
//  $tax=taxonomy_get_term_by_name('meta 2', 'meta');
//  $tax=array_shift($tax);




//dpm($tax);
//  foreach ($tax->field_productos_relacionados['und'] as $keyx => $valuex) {
//    $testing[$keyx] = $valuex;
//
//  }
//  dpm($testing);

//  dpm($tax);
//
//  $prod=$tax[1258]->field_productos_relacionados['und'][0]['tid'];
//  dpm(taxonomy_term_load($prod));
//  $...->field_productos_relacionados['und'][0]['tid']

//Items de compromiso
//$form['field_item_compromiso'][LANGUAGE_NONE]['#title'] = 'Items de Compromiso';
//$form['field_item_compromiso'][LANGUAGE_NONE]['add_more']['#value'] = 'Añadir Nuevo Item de Compromiso';

//  dpm($form);

//  $tax=array_shift($tax);
//  dpm($tax->field_productos_relacionados['und'][0]['tid']);

//  $lol[0]=$result[0]->field_productos_relacionados_tid;
//  $lol[1]=$result[1]->field_productos_relacionados_tid;
//
//  $lol2[0]=taxonomy_term_load($lol[0]);
//  $lol2[1]=taxonomy_term_load($lol[1]);
//
//
//
//  $lol3[0]=$lol2[0]->name;
//  $lol3[1]=$lol2[1]->name;

//  $lol4=(object)$lol3;

//  $lol4

//  $lol4[0]='x';
//  $label=entity_label('taxonomy_term', 'taxonomy');
//  $matches['producto 5']=check_plain('producto cinco');
//  foreach ($result as $row) {
////    $label=entity_label('taxonomy_term', 'taxonomy');
//
////    $matches[$label] = check_plain($row->field_productos_relacionados_tid);
////    $pop=taxonomy_term_load($row->field_productos_relacionados_tid);
//  }

//////////////////////////////////////////////////////////////

//  $str='select field_productos_relacionados_tid from field_data_field_productos_relacionados where entity_id = '.variable_get('meta').'';
//  $result = db_query($str);
//  $result=$result->fetchAllKeyed();
//  $result=$result->fetchAssoc();
//  $result=$result->fetchAllAssoc(1);
//  $result=$result->fetchField();
//  $result=$result->fetchCol(0);


//  $some = array();
//
//  foreach ($result as $keyy => $vall) {
//
//    $match[$vall]=taxonomy_term_load($vall);
//
//    $some[$keyy]=$match[$vall]->name;
//
//  }


//  $asd=(object)$some;
// Return the result to the form in json