<?php

/**
 * Implements hook_menu().
 */
function msngr_compromisos_menu () {
  $items['productos/autocomplete'] = array(
    'title' => t('Autocomplete for products'),
    'page callback' => '_productos_autocomplete',
    'page arguments' => array('meta'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

function _productos_autocomplete () {

    $result = db_select('field_data_field_productos_relacionados', 'ttd')
    ->fields('ttd', array('field_productos_relacionados_tid'))
    ->condition('entity_id', '%' . variable_get('meta') . '%', 'LIKE')
//    ->condition('name', '%' . db_like($string) . '%', 'LIKE')
    ->execute()
    ->fetchAll();
//

  foreach ($result as $k => $v) {

  $tids[$k]=$result[$k]->field_productos_relacionados_tid;
    $tax2[$k]=taxonomy_term_load($tids[$k]);
    $tax_names[$k]=$tax2[$k]->name;
    $matches[$tax_names[$k]]=check_plain($tax_names[$k]);

  }

  drupal_json_output($tax2);
}

/**
 * Implements hook_node_access().
 */
function msngr_compromisos_node_access($node, $op, $account) {
  if (!is_string($node) && in_array('user-institucional', $account->roles) && $op == 'update') {
    if($node->type == 'compromiso_de_gestion') {
      $user_entity = user_load($account->uid);
      return field_target_id($user_entity->field_institucion, 0) != field_target_id($node->field_institucion, 0) ? NODE_ACCESS_DENY : NODE_ACCESS_ALLOW;
    }

    if($node->type == 'evaluacion_de_metas') {
      $result = FALSE;
      $compromisos = get_compromiso_by_meta($node->nid);
      foreach ($compromisos as $compromiso) {
        $compromiso_node = node_load($compromiso->nid);
        $user_entity = user_load($account->uid);
        $result = (field_target_id($user_entity->field_institucion, 0) == field_target_id($compromiso_node->field_institucion, 0)) || $result;
      }
      return $result ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function msngr_compromisos_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'msngr_compromisos');
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  foreach ($template_file_objects as $key => $template_file) {
    if(!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function msngr_compromisos_node_insert($node) {
  if($node->type == "compromiso_de_gestion") {
    update_compromiso_de_gestion($node);
    update_percentage_data_by_compromiso($node);
  }
}

/**
 * Implements hook_node_presave().
 */
function msngr_compromisos_node_presave($node) {
  if($node->type == "compromiso_de_gestion") {
    new_compromiso_id($node);
  }
}

/**
 * Implements hook_node_update().
 */
function msngr_compromisos_node_update($node) {
  if($node->type == "compromiso_de_gestion") {
    update_percentage_compromiso($node);
  }

  if($node->type == 'evaluacion_de_metas') {
    if(field_value($node->field_porcentaje_avance , 0) != field_value($node->original->field_porcentaje_avance, 0)) {
      update_percentage_compromiso_evaluacion_updated($node);
      update_meta_percentage($node->field_meta_tax[LANGUAGE_NONE][0]['tid']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function msngr_compromisos_form_compromiso_de_gestion_node_form_alter(&$form, &$form_state, $form_id) {

  global $user;

  $user_full = user_load($user->uid, TRUE);

  if (is_add_form($form_state) && in_array('usuario-institucional', $user->roles)) {
    auto_compromiso_form_title($user_full, $form, $form_state);
  }

  //Add css

  $form['#attached'] = array(
    'css' => array(drupal_get_path('module', 'msngr_compromisos') . '/css/compromisos_form.css'),
  );


  //Compromiso de Gestión title disabled
  $form['title']['#disabled'] = TRUE;

  //Restrict access
  $form['field_porcentaje_de_avance_compr']['#access'] = FALSE;
  $form['field_year_compromiso']['#access'] = FALSE;
  $form['field_estado']['#access'] = FALSE;
  $form['field_id_compromiso']['#access']= FALSE;


    //Evaluar metas
  $form['field_evaluar_metas']['und']['actions']['ief_add']['#value'] = 'Agregar nueva evaluación';

  if (isset($form['field_evaluar_metas'][LANGUAGE_NONE]['form'])) { //Cuando se agrega una nueva evaluación
    $form['field_evaluar_metas'][LANGUAGE_NONE]['form']['title']['#access'] = FALSE;
    $form['field_evaluar_metas'][LANGUAGE_NONE]['form']['status']['#access'] = FALSE;
    $form['field_evaluar_metas'][LANGUAGE_NONE]['form']['#title'] = 'Agregar nueva evaluación';
    $form['field_evaluar_metas'][LANGUAGE_NONE]['form']['actions']['ief_add_save']['#value'] = 'Crear Evaluación';
  }
  if (!isset($form['field_evaluar_metas'][LANGUAGE_NONE]['form'])) {
    foreach ($form['field_evaluar_metas'][LANGUAGE_NONE]['entities'] as $kkey => $vvalue) {
////      dpm($kkey);
      if (is_numeric($kkey)) {
//        $form['field_evaluar_metas'][LANGUAGE_NONE]['entities'][$kkey]['form']['field_meta_tax'][LANGUAGE_NONE][0]['tid']['#ajax']=$ajax_producto_edit;
        foreach ($form['field_evaluar_metas'][LANGUAGE_NONE]['entities'][$kkey]['form']['field_evaluar_producto'][LANGUAGE_NONE] as $kprod => $vprod) {
          if (is_numeric($kprod)) {
//            $form['field_evaluar_metas'][LANGUAGE_NONE]['entities'][$kkey]['form']['field_evaluar_producto'][LANGUAGE_NONE][$kprod]['field_producto'][LANGUAGE_NONE][0]['tid']['#autocomplete_path']="productos/autocomplete";
            $form['field_evaluar_metas'][LANGUAGE_NONE]['entities'][$kkey]['form']['title']['#access'] = FALSE;
            $form['field_evaluar_metas'][LANGUAGE_NONE]['entities'][$kkey]['form']['status']['#access'] = FALSE;
            $form['field_evaluar_metas'][LANGUAGE_NONE]['entities'][$kkey]['form']['#title'] = 'Editar evaluación';
            $form['field_evaluar_metas'][LANGUAGE_NONE]['entities'][$kkey]['form']['actions']['ief_edit_save']['#value'] = 'Guardar Cambios';
          }
        }
      }
    }
  }


    /////////////////dropdown productos creacion compromiso
    if (isset($form_state['values']['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_meta_tax'][LANGUAGE_NONE][0]['tid'])) { //Cuando se agrega una nueva evaluación
      $form['field_evaluar_metas'][LANGUAGE_NONE]['form']['title']['#access'] = FALSE;
      if (!empty($form['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_meta_tax'][LANGUAGE_NONE][0]['tid'])) {
        $tax=$form_state['values']['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_meta_tax'][LANGUAGE_NONE][0]['tid'];
        $result = _fetch_results_callback($tax);
        $output = _output_tax_results($result);

        foreach ($form['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_evaluar_producto'][LANGUAGE_NONE] as $ki => $va) {
          if (is_numeric($ki)) {
            $form['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_evaluar_producto'][LANGUAGE_NONE][$ki]['field_producto'][LANGUAGE_NONE]['#options'] = array(
              $output,
            );


//=======

  $form_prod=$form['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_evaluar_producto'][LANGUAGE_NONE];

//>>>>>>> master
          }
        }
      }
    }
    $ajax_producto = array(
      'callback' => '_call_producto',
      'method' => 'replace',
      'wrapper' => 'replace_div_1',
    );

    foreach ($form['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_evaluar_producto'][LANGUAGE_NONE] as $kkk => $vvv) {
      if (is_numeric($kkk)){
        $form['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_evaluar_producto'][LANGUAGE_NONE][$kkk]['field_producto'][LANGUAGE_NONE]['#prefix']='<div id="replace_div_'.$kkk.'">';
        $form['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_evaluar_producto'][LANGUAGE_NONE][$kkk]['field_producto'][LANGUAGE_NONE]['#suffix']='</div>';
      }
    }
    $form['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_meta_tax'][LANGUAGE_NONE][0]['tid']['#ajax']=$ajax_producto;
    /////////////////dropdown productos creacion compromiso
    ////////    edicion                  //////////////////
    /////////////////dropdown productos edicion compromiso
    $call_producto_edit = array(
    'callback' => '_call_producto_edit',
    'method' => 'replace',
//    'wrapper' => 'replace_div_1',
  );

  $metas_entities = array_filter($form['field_evaluar_metas'][LANGUAGE_NONE]['entities'], function ($key) {
    return is_numeric($key);
  }, ARRAY_FILTER_USE_KEY);

 foreach ($metas_entities as $i => $meta) {
   if(isset($meta['form'])) {
     $taxE = _get_actual_meta_id($i, $form, $form_state);
     $resultE = _fetch_results_callbackE($taxE);
     $outputE = _output_tax_resultsE($resultE);
     $meta['form']['field_meta_tax'][LANGUAGE_NONE][0]['tid']['#ajax'] = $call_producto_edit;
     foreach ($meta['form']['field_evaluar_producto'][LANGUAGE_NONE] as $kkv => $vvk) {
       if (is_numeric($kkv)) {

         $meta['form']['field_evaluar_producto'][LANGUAGE_NONE][$kkv]['field_producto'][LANGUAGE_NONE]['#prefix'] = '<div id="replace_edit_'.$kkv.'">';
         $meta['form']['field_evaluar_producto'][LANGUAGE_NONE][$kkv]['field_producto'][LANGUAGE_NONE]['#suffix'] = '</div>';
         $meta['form']['field_evaluar_producto'][LANGUAGE_NONE][$kkv]['field_producto'][LANGUAGE_NONE]['#options'] = array(
           $outputE,
         );
       }
     }
     $form['field_evaluar_metas'][LANGUAGE_NONE]['entities'][$i] = $meta;
   }
 }
}

function _get_actual_meta_id($index, $form, $form_state){
  return isset($form_state['values']['field_evaluar_metas']['und']['entities'][$index]['form']) ?
   $form_state['values']['field_evaluar_metas']['und']['entities'][$index]['form']['field_meta_tax']['und'][0]['tid'] :
   $form['field_evaluar_metas'][LANGUAGE_NONE]['entities'][$index]['#entity']->field_meta_tax[LANGUAGE_NONE][0]['tid'];
}

function _call_producto_edit ($form, $form_state) {
  //$form['field_evaluar_metas'][LANGUAGE_NONE]['entities'][$kkey]['form']['field_evaluar_producto'][LANGUAGE_NONE][$kprod]['field_producto'][LANGUAGE_NONE]['#options']
  $commandsE = array();
  foreach ($form['field_evaluar_metas'][LANGUAGE_NONE]['entities'] as $kv => $vk) {
    if (is_numeric($kv)) {
      foreach ($form['field_evaluar_metas'][LANGUAGE_NONE]['entities'][$kv]['form']['field_evaluar_producto'][LANGUAGE_NONE] as $kkvv => $vkvk) {
        if (is_numeric($kkvv)) {
//          $form['field_evaluar_metas'][LANGUAGE_NONE]['entities'][$kv]['form']['field_evaluar_producto'][LANGUAGE_NONE][$kkv]['field_producto'][LANGUAGE_NONE]['#options'];
          $commandsE[]=ajax_command_replace('#replace_edit_'.$kkvv.'', drupal_render($form['field_evaluar_metas'][LANGUAGE_NONE]['entities'][$kv]['form']['field_evaluar_producto'][LANGUAGE_NONE][$kkvv]['field_producto'][LANGUAGE_NONE]));
        }
      }
    }
//    break;
  }
  return array (
    '#type' => 'ajax',
    '#commands' => $commandsE,
  );
}

function _call_producto ($form, $form_state) {
  $commands = array();
  foreach ($form['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_evaluar_producto'][LANGUAGE_NONE] as $kv => $vk) {
    if (is_numeric($kv)) {
      $commands[]=ajax_command_replace('#replace_div_'.$kv.'', drupal_render($form['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_evaluar_producto'][LANGUAGE_NONE][$kv]['field_producto']));
    }
  }
  return array (
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

function _fetch_results_callback ($tax) {
  $result = db_select('field_data_field_productos_relacionados', 'ttd')
    ->fields('ttd', array('field_productos_relacionados_tid'))
    ->condition('entity_id', '%' . $tax . '%', 'LIKE')
    ->execute()
    ->fetchAll();
  return $result;
}


function _output_tax_results ($fetched) {
  $ar = array();
  foreach ($fetched as $k => $v) {
    $tids[$k]=$fetched[$k]->field_productos_relacionados_tid;
    $tax2[$k]=taxonomy_term_load($tids[$k]);
    $ar[$fetched[$k]->field_productos_relacionados_tid]=$tax2[$k]->name;
//=======
//  //Evaluar metas
//  $form['field_evaluar_metas']['und']['actions']['ief_add']['#value'] = 'Agregar nueva evaluación';
//
//  if (isset($form['field_evaluar_metas'][LANGUAGE_NONE]['form'])) { //Cuando se agrega una nueva evaluación
//    $form['field_evaluar_metas'][LANGUAGE_NONE]['form']['title']['#access'] = FALSE;
//    $form['field_evaluar_metas'][LANGUAGE_NONE]['form']['status']['#access'] = FALSE;
//    $form['field_evaluar_metas'][LANGUAGE_NONE]['form']['#title'] = 'Agregar nueva evaluación';
//    $form['field_evaluar_metas'][LANGUAGE_NONE]['form']['actions']['ief_add_save']['#value'] = 'Crear Evaluación';
//>>>>>>> master
  }
  return $ar;
}
//////////////////////////////////
function _fetch_results_callbackE ($tax) {
  $result = db_select('field_data_field_productos_relacionados', 'ttd')
    ->fields('ttd', array('field_productos_relacionados_tid'))
    ->condition('entity_id', '%' . $tax . '%', 'LIKE')
    ->execute()
    ->fetchAll();
  return $result;
}

function _output_tax_resultsE ($fetched) {
  $ar = array();
  foreach ($fetched as $k => $v) {
    $tids[$k]=$fetched[$k]->field_productos_relacionados_tid;
    $tax2[$k]=taxonomy_term_load($tids[$k]);
    $ar[$fetched[$k]->field_productos_relacionados_tid]=$tax2[$k]->name;
  }
  return $ar;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function msngr_compromisos_preprocess_print(&$variables) {
  if( $variables['node']->type == "compromiso_de_gestion") {
    $variables['metas'] = [];
    foreach ($variables['node']->field_evaluar_metas[LANGUAGE_NONE] as $index => $meta_id) {
      $meta_node = node_load($meta_id['target_id']);
      array_push($variables['metas'], format_metas_labels($meta_node));
    }
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
//function msngr_compromisos_preprocess_field(&$variables) {
//  if($variables['element']['#field_name'] == 'field_evaluar_metas') {
//    foreach ($variables['items'] as $id => $metas_id) {
//      $node = node_load($metas_id['#markup']);
//      $labels = format_metas_labels($node);
//      $variables['table_values'][$id] = [
//        'eje' => $labels['field_eje'],
//        'ambito' => $labels['field_ambito'],
//        'lineamiento' => $labels['field_lineamiento'],
//        'accion' => $labels['field_accion_codigo'] . ':' . $labels['field_accion_estrategica'],
//        'meta' => $labels['field_title'],
//        'meta_percent' => $labels['field_porcentaje_avance'],
//        'meta_url' => $labels['node_url'],
//        'productos' => $labels['field_productos']
//        ,
//      ];
//    }
//  }
//}

//Ajax methods
function ajax_producto_callback ($form, $form_state) {
  $commands = array();
  $meta_capturada=$form['field_evaluar_metas'][LANGUAGE_NONE]['form']['field_meta_tax'][LANGUAGE_NONE][0]['tid']['#value'];
  $tax=taxonomy_get_term_by_name($meta_capturada, 'meta');
  $tax=array_shift($tax);
  variable_set('meta', $tax->tid);
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

function ajax_producto_edit_callback ($form, $form_state) {
  $commands = array();
  foreach ($form['field_evaluar_metas'][LANGUAGE_NONE]['entities'] as $kcb => $vcb) {
    if (is_numeric($kcb)) {
      $captured_meta=$form['field_evaluar_metas'][LANGUAGE_NONE]['entities'][$kcb]['form']['field_meta_tax'][LANGUAGE_NONE][0]['tid']['#value'];
    }
  }
  $tax=taxonomy_get_term_by_name($captured_meta, 'meta');
  $tax=array_shift($tax);
  variable_set('meta', $tax->tid);
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );

}

/**
 * Implements hook_preprocess_HOOK().
 */
function msngr_compromisos_preprocess_field(&$variables) {
  if($variables['element']['#field_name'] == 'field_evaluar_metas') {
    foreach ($variables['items'] as $id => $metas_id) {
      $meta_node = node_load($metas_id['#markup']);
      $meta_tax = taxonomy_term_load($meta_node->field_meta_tax[LANGUAGE_NONE][0]['tid']);
      $accion = taxonomy_term_load($meta_tax->field_accion_estrategica[LANGUAGE_NONE][0]['tid']);
      $eje = taxonomy_term_load($accion->field_eje[LANGUAGE_NONE][0]['target_id']);
      $ambito = taxonomy_term_load($accion->field_ambito[LANGUAGE_NONE][0]['target_id']);
      $lineamiento = taxonomy_term_load($accion->field_lineamiento[LANGUAGE_NONE][0]['target_id']);
      $productos = [];
      foreach ($meta_node->field_evaluar_producto[LANGUAGE_NONE] as $id_item => $item) {
        $producto_id = field_collection_item_load($item['value'])->field_producto[LANGUAGE_NONE][0]['tid'];
        $producto = taxonomy_term_load($producto_id);
        $productos[$id_item] = $producto->name;
      }
      $variables['table_values'][$id] = [
        'eje' => $eje->name,
        'ambito' => $ambito->name,
        'lineamiento' => $lineamiento->name,
        'accion' => $accion->fiel_codigo[LANGUAGE_NONE][0]['value'] . ': ' . $accion->name,
        'meta' => $meta_node->title,
        'meta_percent' => porcentaje_avance($meta_node->field_porcentaje_avance['und'][0]['value']),
        'meta_url' => '/node/' . $meta_node->nid,
        'productos' => $productos,
      ];
    }
  }
}

function is_add_form($form_state){
  return !isset($form_state['node']->nid);
}

function auto_compromiso_form_title($user, &$form, &$form_state) {
  $ins_nid = field_target_id($user->field_institucion, 0);

  $ins = node_load($ins_nid);
  $form['field_institucion']['#disabled'] = TRUE;
  $form['field_institucion'][LANGUAGE_NONE][0]['target_id']['#default_value'] = t('@institution (@nid)', array('@institution' => $ins->title, '@nid' => $ins_nid));
  $form_state['values']['field_institucion'][LANGUAGE_NONE][0]['target_id'] = $ins_nid;
  $form['title']['#default_value'] = date('Y').'-'.$ins->title;
}

function new_compromiso_id($node) {
  if($node->is_new) {
    if($node->field_id_compromiso) {
      $compromiso_title = get_last_compromiso_title();
      if($compromiso_title != NULL) {
        $splitted_title = explode('-', $compromiso_title);

        if ($splitted_title[1] != date('Y')) {
          autoinc_compromiso($node);

        } else {
          $id_compromiso = $splitted_title[0] + 1;
          $node->field_id_compromiso[LANGUAGE_NONE][0]["value"] = $id_compromiso;
          $ins = !empty($node->field_institucion[LANGUAGE_NONE]) ? node_load(field_target_id($node->field_institucion, 0)) : NULL;
          $ins_name = $ins ? $ins->title : '';
          $year = explode("-", $node->field_year_compromiso[LANGUAGE_NONE][0]['value'])[0];
          $node->title = $id_compromiso . '-' . $year . '-' . $ins_name;
        }
      } else {
        autoinc_compromiso($node);
      }
    }
  }
}

function autoinc_compromiso($node){
  $node->field_id_compromiso[LANGUAGE_NONE][0]["value"] = 1;
  $id = $node->field_id_compromiso[LANGUAGE_NONE][0]["value"];
  $ins = node_load(field_target_id($node->field_institucion, 0));
  $node->title = $id . '-' . date('Y') . '-' . $ins->title;
}

function check_compromiso_id($node) {
  $ins = !empty($node->field_institucion) ? node_load(field_target_id($node->field_institucion, 0)) : null;
  $xploded_title = explode('-', $node->title);
  $xploded_title[2] = $ins->title;
  $node->title = $xploded_title[0].'-'.$xploded_title[1].'-'.$xploded_title[2];
}

function allowed_edit_any_content() {
  global $user;
  return in_array("administrator", $user->roles) || in_array("admin-sngr", $user->roles);
}

function field_target_id(&$array, $id) {
  return $array[LANGUAGE_NONE][$id]['target_id'];
}

function field_value(&$array, $id) {
  return empty($array) ? '' : $array[LANGUAGE_NONE][$id]['value'];
}

function get_compromiso_percentage($node) {
  $cant = sizeof($node->field_evaluar_metas[LANGUAGE_NONE]);
  $sum = 0;
  foreach ($node->field_evaluar_metas[LANGUAGE_NONE] as $meta_id) {
    $node_meta = node_load($meta_id['target_id']);
    $sum += porcentaje_avance($node_meta->field_porcentaje_avance[LANGUAGE_NONE][0]['value']);
  }
  return $sum / $cant;
}

function porcentaje_avance($value) {
  return empty($value) ? 0 : ($value - 1) * 25;
}

//Updates
function update_percentage_data_by_compromiso($node) {
  update_percentage_compromiso($node);
  foreach ($node->field_evaluar_metas[LANGUAGE_NONE] as $emid) {
    $em_node = node_load($emid['target_id']);
    update_meta_percentage($em_node->field_meta_tax[LANGUAGE_NONE][0]['tid']);
  }
}

function update_compromiso_de_gestion($node) {
  if(!isset($node->already_updated) || (isset($node->already_updated) && $node->already_updated)) {
    check_compromiso_id($node);
    //update_percentage_compromiso($node);
    $node->is_new = FALSE;
    $node->already_updated = TRUE;
    field_attach_update('node', $node);
  }
}

function update_percentage_compromiso($node) {
  $percentaje = get_compromiso_percentage($node);
  $node->field_porcentaje_de_avance_compr = simple_field_value($percentaje);
  $node->is_new = false;
  field_attach_update('node', $node);
}

function update_percentage_compromiso_evaluacion_updated($update_node) {
  $meta_actual_node = node_load($update_node->nid);
  $meta_actual_node->field_porcentaje_avance['und'][0]['value'] = field_value($update_node->field_porcentaje_avance, 0);
  $compromisos = get_compromiso_by_meta($update_node->nid);
  foreach ($compromisos as $compromiso_nid) {
    $compromiso_node = node_load($compromiso_nid->nid);
    $compromiso_node->field_porcentaje_de_avance_compr['und'][0]['value'] = get_compromiso_percentage($compromiso_node);
    //update_percentage_compromiso($compromiso_node);
    field_attach_update('node', $compromiso_node);
  }
}

function update_meta_name($compromiso_title, $nid) {
  $node = node_load($nid);
  $title = $node->title;
  /*$node->title = t('@compromiso-@evaluacion', array(
    '@compromiso' => $compromiso_title,
    '@evaluacion' => $title
  ));*/
  $node->title = $compromiso_title . '-' . $title;
  $node->revision = 1;
  node_save($node);
}

function update_meta_percentage($nid) {
  $meta = taxonomy_term_load($nid);
  $percentage = get_meta_global_percentage($nid);
  $meta->field_meta_avance_global = simple_field_value($percentage);
  taxonomy_term_save($meta);
}

//Formats
function format_metas_labels($node) {
  $meta_tax = taxonomy_term_load($node->field_meta_tax[LANGUAGE_NONE][0]['tid']);
  $accion = taxonomy_term_load($meta_tax->field_accion_estrategica[LANGUAGE_NONE][0]['tid']);
  $eje = taxonomy_term_load($accion->field_eje[LANGUAGE_NONE][0]['target_id']);
  $ambito = taxonomy_term_load($accion->field_ambito[LANGUAGE_NONE][0]['target_id']);
  $lineamiento = taxonomy_term_load($accion->field_lineamiento[LANGUAGE_NONE][0]['target_id']);
  $productos = [];
  $temas = [];

  foreach ($node->field_tema_necesidad_meta[LANGUAGE_NONE] as $tema) {
    array_push($temas, $tema['value']);
  }

  foreach ($node->field_evaluar_producto[LANGUAGE_NONE] as $id_item => $item) {
    $producto_fc = field_collection_item_load($item['value']);
    $productos[$id_item] = format_productos_labels($producto_fc);
  }

  return array(
    'field_title' => $node->title,
    'field_eje' => $eje->name,
    'field_ambito' => $ambito->name,
    'field_lineamiento' => $lineamiento->name,
    'field_accion_estrategica' => $accion->name,
    'field_accion_codigo' => field_value($accion->field_codigo, 0),
    'field_accion_descripcion' => $accion->description,
    'field_meta' => $meta_tax->name,
    'field_meta_codigo' => field_value($meta_tax->field_codigo, 0),
    'field_meta_description' => $meta_tax->description,
    'field_organizacion_capacitadora' => field_value($node->field_organizacion_capacitadora, 0),
    'field_tema_necesidad_meta' => $temas,
    'field_porcentaje_avance' => porcentaje_avance(field_value($node->field_porcentaje_avance, 0)),
    'field_porcentaje_avance_coment' => field_value($node->field_porcentaje_avance_coment, 0),
    'field_obstaculo' => field_value($node->field_obstaculo, 0),
    'field_aspecto_positivo' => field_value($node->field_aspecto_positivo, 0),
    'field_observacion_del_analista' => field_value($node->field_observacion_del_analista, 0),
    'field_recibio_asesoria_meta' => field_value($node->field_recibio_asesoria_meta, 0) ? 'Sí' : 'No',
    'field_su_org_requiere_asesoria' => field_value($node->field_su_org_requiere_asesoria, 0) ? 'Sí' : 'No',
    'field_productos' => $productos,
    'node_url' => url('node/' . $node->nid, array('absolute' => TRUE)),
  );
}

function format_productos_labels($field_collection) {
  $producto_id = $field_collection->field_producto[LANGUAGE_NONE][0]['tid'];
  $producto = taxonomy_term_load($producto_id);
  $files = [];
  foreach ($field_collection->field_prod_fuente_verifica[LANGUAGE_NONE] as $file) {
    $file_data = file_load($file['fid']);
    $url_file = file_create_url($file_data->uri);
    array_push($files, $url_file);
  }
  return array(
    'field_producto' => $producto->name,
    'field_producto_codigo' => field_value($producto->field_cod_producto_meta, 0),
    'field_detalle_del_producto' => field_value($producto->field_detalle_del_producto, 0),
    'field_producto_descripcion' => $producto->description,
    'field_producto_ano_inicial' => field_value($producto->	field_anno_ini_meta, 0),
    'field_producto_ano_final' => field_value($producto->	field_anno_fin_meta, 0),
    'field_descripc_fuente_verifica' => field_value($field_collection->field_descripc_fuente_verifica, 0),
    'field_prod_fuente_verifica' => $files,
  );
}

function simple_field_value($value) {
  return array(
    LANGUAGE_NONE => array(
      0 => array(
        'value' => $value,
        'format' => NULL,
        'safe_value' => $value,
      ),
    ),
  );
}

//Queries
function get_compromiso_by_meta($meta_id) {
  $query = db_select('node', 'n');
  $query->fields('n', array('title', 'nid'))
    ->leftJoin('field_data_field_evaluar_metas', 'meta', 'n.nid = meta.entity_id AND meta.entity_type = \'node\'');
  $query->leftJoin('node', 'meta_node', 'meta.field_evaluar_metas_target_id = meta_node.nid');

  $query->condition('n.status', 1)
    //->condition('n.type', 'compromiso_de_gestion', 'IN')
    ->condition('meta.field_evaluar_metas_target_id', $meta_id);

  return $query->execute()->fetchAll();
}

function get_last_compromiso_title() {
  $query_id_compromiso = db_select('field_data_field_id_compromiso', 'comp');
  $query_id_compromiso->fields('comp', array('field_id_compromiso_value'));
  $query_id_compromiso->orderBy('entity_id', 'DESC');
  $query_id_compromiso->range(0, 1);
  $count = $query_id_compromiso->execute()->fetchField();

  $query_node_title = db_select('node');
  $query_node_title->addExpression('MAX(nid)');
  $query_node_title->condition('type', 'compromiso_de_gestion', '=');
  $executed_query=$query_node_title->execute()->fetchField();
  $node_loaded_with_id = node_load($executed_query);

  return $count != NULL ? $node_loaded_with_id->title : NULL;
}

function get_meta_global_percentage($meta_id) {
  $query = db_select('node', 'n');
  $query->innerJoin('field_data_field_meta_tax', 'meta_tax', 'n.nid = meta_tax.entity_id AND meta_tax.entity_type = \'node\'');
  $query->leftJoin('field_data_field_porcentaje_avance', 'avance', 'n.nid = avance.entity_id AND avance.entity_type = \'node\'');

  $query->fields('n', array('nid'));
    $query->fields('avance', array('field_porcentaje_avance_value'));

  $query->condition('n.status', 1)
    ->condition('meta_tax.field_meta_tax_tid', $meta_id);

  $fetch = $query->execute()->fetchAll();
  $cant = sizeof($fetch);
  $sum = 0;
  foreach ($fetch as $evaluacion) {
    $sum += porcentaje_avance($evaluacion->field_porcentaje_avance_value );
  }

  return $sum / $cant;
}