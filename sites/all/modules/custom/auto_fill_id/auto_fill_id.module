<?php
/**
 * Implements hook_node_access().
 */
function auto_fill_id_node_access($node, $op, $account) {
  if (!is_string($node) && in_array('user-institucional', $account->roles)  && $node->type == 'compromiso_de_gestion' && $op == 'update') {
    $user_entity = user_load($account->uid);
    return field_target_id($user_entity->field_institucion, 0) != field_target_id($node->field_institucion, 0) ? NODE_ACCESS_DENY : NODE_ACCESS_ALLOW;
  }
}

/**
 * Implements hook_node_insert().
 */
function auto_fill_id_node_insert($node)
{
    if($node->type == "compromiso_de_gestion") {
      update_compromiso_de_gestion($node);
        //action_id($node);
      //dpm($node);
    }
}

/**
 * Implements hook_theme_registry_alter().
 */
function auto_fill_id_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'auto_fill_id');
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  foreach ($template_file_objects as $key => $template_file) {
    if(!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function auto_fill_id_node_presave($node) {
  if($node->type == "compromiso_de_gestion") {
    new_compromiso_id($node);
  }
}

/**
 * Implements hook_node_update().
 */
function auto_fill_id_node_update($node)
{
    if($node->type == "compromiso_de_gestion") {
      update_compromiso_de_gestion($node);
    }

    if($node->type == "meta" && !empty($node->field_porcentaje_avance[LANGUAGE_NONE])) {
      if($node->field_porcentaje_avance[LANGUAGE_NONE][0]['value'] != $node->original->field_porcentaje_avance[LANGUAGE_NONE][0]['value']) {
        $meta_actual_node = node_load($node->nid);
        $meta_actual_node->field_porcentaje_avance['und'][0]['value'] = $node->field_porcentaje_avance['und'][0]['value'];
        $compromisos = get_compromiso_by_meta($node->nid);
        foreach ($compromisos as $compromiso_nid) {
          $compromiso_node = node_load($compromiso_nid->nid);
          $compromiso_node->field_porcentaje_de_avance_compr['und'][0]['value'] = compromiso_percentage($compromiso_node);
          //update_percentage_compromiso($compromiso_node);
          field_attach_update('node', $compromiso_node);
        }
      }
    }
}

/**
 * Implements hook_form_alter().
 */
function auto_fill_id_form_alter(&$form, &$form_state, $form_id) {

}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function auto_fill_id_form_meta_node_form_alter(&$form, &$form_state, $form_id) {

  //css
  $form['#attached'] = array(
    'css' => array('sites/all/modules/custom/auto_fill_id/css/meta_form.css'),
  );

  $form['field_meta_codigo']['#access'] = FALSE;

  $form['field_producto'][LANGUAGE_NONE]['actions']['ief_add']['#value'] = 'Añadir producto';

  $entities = array_filter($form['field_producto'][LANGUAGE_NONE]['entities'], function ($k) { return is_numeric($k); },  ARRAY_FILTER_USE_KEY);

  if(!empty($entities)) {
    foreach ($entities as $key => $entity) {
      $form['field_producto'][LANGUAGE_NONE]['entities'][$key]['form']['title']['#disabled'] = TRUE;
      $form['field_producto'][LANGUAGE_NONE]['form']['actions']['ief_add_save']['#value'] = 'Guardar Cambios';
    }
  }

  global $user;
  //Edit
    if (!in_array("administrator", $user->roles) || !in_array("admin-sngr", $user->roles)){
      $entities = array_filter($form['field_producto'][LANGUAGE_NONE]['entities'], function ($k) { return is_numeric($k); },  ARRAY_FILTER_USE_KEY);
      if(!empty($entities)) {
        foreach ($entities as $key => $entity) {
          $form['field_producto'][LANGUAGE_NONE]['entities'][$key]['form']['title']['#disabled'] = TRUE;
          $form['field_producto'][LANGUAGE_NONE]['form']['actions']['ief_add_save']['#value'] = 'Guardar Cambios';
        }
      }
    }

  //Add new product
  if(isset($form['field_producto'][LANGUAGE_NONE]['form'])) {
    $form['field_producto'][LANGUAGE_NONE]['form']['#title'] = 'Nuevo producto';
    $form['field_producto'][LANGUAGE_NONE]['form']['actions']['ief_add_save']['#value'] = 'Crear Producto';
    $form['field_producto'][LANGUAGE_NONE]['form']['field_cod_producto_meta'][LANGUAGE_NONE][0]['value']['#default_value'] = 'E#A#L#M1P1';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function auto_fill_id_form_compromiso_de_gestion_node_form_alter(&$form, &$form_state, $form_id) {

  global $user;

  $user_full = user_load($user->uid, TRUE);

  if (is_add_form($form_state) && in_array('usuario-institucional', $user->roles)) {
    auto_compromiso_form_title($user_full, $form, $form_state);
  }

  //Add css
  $form['#attached'] = array(
    'css' => array('sites/all/modules/custom/auto_fill_id/css/compromiso_form.css'),
  );

  //Compromiso de Gestión title disabled
  $form['title']['#disabled'] = TRUE;

  //Restrict access
  $form['field_porcentaje_de_avance_compr']['#access'] = FALSE;
  $form['field_year_compromiso']['#access'] = FALSE;
  $form['field_estado']['#access'] = FALSE;
  $form['field_id_compromiso']['#access']= FALSE;

  //Items de compromiso
  $form['field_item_compromiso'][LANGUAGE_NONE]['#title'] = 'Items de Compromiso';
  $form['field_item_compromiso'][LANGUAGE_NONE]['add_more']['#value'] = 'Añadir Nuevo Item de Compromiso';

  $items_array = array_filter($form['field_item_compromiso'][LANGUAGE_NONE], function ($k) { return is_numeric($k); },  ARRAY_FILTER_USE_KEY);

  foreach($items_array as $item_id => $item) {
      $item['field_id_item']['#access'] = FALSE;
      $item_title = 'Item #' . ($item_id + 1);
      $group1 = $item_id > 0 ? clone_group($item['#fieldgroups']['group_item_single_tab']) : $item['#fieldgroups']['group_item_single_tab'];
      $group2 = $item_id > 0 ? clone_group($item['#fieldgroups']['group_items_v_tabs']) : $item['#fieldgroups']['group_items_v_tabs'];

      $item['field_id_item'][LANGUAGE_NONE][0]['value']['#default_value'] = $item_title;
      $group1->label = $item_title;
      $group2->label = $item_title;

      $item['#fieldgroups']['group_item_single_tab'] = $group1;
      $item['#groups']['group_item_single_tab'] = $group1;
      $item['#fieldgroups']['group_items_v_tabs'] = $group2;
      $item['#groups']['group_items_v_tabs'] = $group2;

      $ajax_eal = array(
        'callback' => 'eal_ajax_callback',
        'method' => 'replace',
      );

      $item['field_codigo_eje'][LANGUAGE_NONE]['#ajax'] = $ajax_eal;
      $item['field_codigo_ambito'][LANGUAGE_NONE]['#ajax'] = $ajax_eal;
      $item['field_codigo_lineamiento'][LANGUAGE_NONE]['#ajax'] = $ajax_eal;

      //Acciones estratégicas
      $item['field_accion_collect'][LANGUAGE_NONE]['#title'] = 'Acciones Estratégicas';
      $item['field_accion_collect'][LANGUAGE_NONE]['add_more']['#value'] = 'Agregar Acción Estratégica';

      foreach($item['field_accion_collect'][LANGUAGE_NONE] as $accion_id => $accion ) {
        if(is_numeric($accion_id)) {

          $accion['field_nombre_manual'][LANGUAGE_NONE]['#ajax'] = $ajax_eal;

          $accion['field_codigo_accion_estrategica'][LANGUAGE_NONE][0]['value']['#disabled'] = $accion['field_nombre_manual'][LANGUAGE_NONE]['#default_value'] != 1;

          //Acción estrategica
          //$accion['field_codigo_accion_estrategica']['#disabled'] = TRUE;
          $accion['field_codigo_accion_estrategica'][LANGUAGE_NONE][0]['value']['#prefix'] = '<div id="item_' . $item_id . '_codigo_accion_'. $accion_id .'">';
          //$accion['field_codigo_accion_estrategica'][LANGUAGE_NONE][0]['value']['#prefix'] = '<div id="codigo_accion_id">';
          $accion['field_codigo_accion_estrategica'][LANGUAGE_NONE][0]['value']['#suffix'] = '</div>';

          $accion_code = is_add_form($form_state) || isset($form_state['values']) ? generate_action_code($item_id, $accion_id, $form) : action_default_value($item_id, $accion_id, $form);

          $accion_group = $accion_id > 0 ? clone_group($accion['#groups']['group_acciones']) : $accion['#groups']['group_acciones'];
          $accion_group->label = 'Acción Estratégica ' . ($accion_id + 1);
          $accion['field_codigo_accion_estrategica'][LANGUAGE_NONE][0]['value']['#value'] = $accion_code;

          $accion['#groups']['group_acciones'] = $accion_group;
          $accion['#fieldgroups']['group_acciones'] = $accion_group;

          //Meta
          $accion['field_meta'][LANGUAGE_NONE]['add_more']['#value'] = 'Agregar nueva meta';
          //unset($accion['field_meta'][LANGUAGE_NONE][0]['target_id']['#autocomplete_path']);

          $meta_array = array_filter($accion['field_meta'][LANGUAGE_NONE], function ($k) { return is_numeric($k); },  ARRAY_FILTER_USE_KEY);
          foreach ($meta_array as $meta_id => $meta) {
            //$meta['target_id']['#disabled'] =TRUE;

            $meta['target_id']['#prefix'] = '<div id="item_' . $item_id . '_accion_' . $accion_id . '_meta_' . $meta_id .'">';
            $meta['target_id']['#suffix'] = '</div>';
            $meta['target_id']['#description'] = 'El código de esta meta será: "' . $accion_code . 'M' . ($meta_id + 1) . '"';
            $accion['field_meta'][LANGUAGE_NONE][$meta_id] = $meta;
          }
          $item['field_accion_collect'][LANGUAGE_NONE][$accion_id] = $accion;
        }
      }
      $form['field_item_compromiso'][LANGUAGE_NONE][$item_id] = $item;
  }

  //foreach que revisa los roles del usuario conectado actualmente, si el # d
  //rol es mayor a los numeros de rol aceptados para poder ver los botones (3 y
  //4 en este caso), el boton se ocultara. El rol 1 funge como usuario anonimo.
  foreach ($user_full->roles as $llave => $cant_roles) {
    if ($llave > 4 || $llave == 1){
      $array_de_items = array_filter($form['field_item_compromiso'][LANGUAGE_NONE], function ($k) { return is_numeric($k); },  ARRAY_FILTER_USE_KEY);
      foreach ($array_de_items as $items_ide => $items_val) {
        unset($form['field_item_compromiso'][LANGUAGE_NONE]['add_more']);
        unset($form['field_item_compromiso'][LANGUAGE_NONE][$items_ide]['remove_button']);
        foreach ($items_val['field_accion_collect'][LANGUAGE_NONE] as $accion_ide => $accion_val) {
          if(is_numeric($accion_ide)){
            unset($form['field_item_compromiso'][LANGUAGE_NONE][$items_ide]['field_accion_collect'][LANGUAGE_NONE]['add_more']);
            unset($form['field_item_compromiso'][LANGUAGE_NONE][$items_ide]['field_accion_collect'][LANGUAGE_NONE][$accion_ide]['remove_button']);
            $array_de_metas = array_filter($accion_val['field_meta'][LANGUAGE_NONE], function ($k) { return is_numeric($k); },  ARRAY_FILTER_USE_KEY);
            foreach ($array_de_metas as $meta_idx => $metax) {
              unset($form['field_item_compromiso'][LANGUAGE_NONE][$items_ide]['field_accion_collect'][LANGUAGE_NONE][$accion_ide]['field_meta'][LANGUAGE_NONE]['add_more']);
            }
          }
        }
      }
    }
  }
  //dpm($form);
  //dpm($form_state);
}

function get_mail_user_by_institution($id) {
  $query = db_select('users', 'u');
  $query->fields('u', array('uid', 'mail'))
        ->leftJoin('field_data_field_enlace_institucional', 'fei', 'u.uid = fei.field_enlace_institucional_target_id AND fei.entity_type = \'node\'' );
  $query->leftJoin('node', 'ins', 'fei.entity_id = ins.nid');
  $query->innerJoin('users_roles', 'ur', 'u.uid = ur.uid');
  $query->leftJoin('field_data_field_institucion', 'fi', 'u.uid = fi.entity_id AND fi.entity_type = \'user\'');
  $query->condition('ur.rid', 7)
        ->condition('fi.field_institucion_target_id', $id);
  return $query->execute()->fetchAll();
}

function get_compromiso_by_meta($meta_id) {
  $query = db_select('node', 'n');
  $query->fields('n', array('title', 'nid'))
        ->leftJoin('field_data_field_item_compromiso', 'data_item', 'n.nid = data_item.entity_id AND data_item.entity_type = \'node\'');
  $query->leftJoin('field_collection_item', 'citem', 'data_item.field_item_compromiso_value = citem.item_id');
  $query->leftJoin('field_data_field_accion_collect', 'data_accion', 'citem.item_id = data_accion.entity_id AND data_accion.entity_type = \'field_collection_item\'');
  $query->leftJoin('field_collection_item', 'item_accion', 'data_accion.field_accion_collect_value = item_accion.item_id');
  $query->leftJoin('field_data_field_meta', 'meta', 'item_accion.item_id = meta.entity_id AND meta.entity_type = \'field_collection_item\'');
  $query->leftJoin('node', 'nod', 'meta.field_meta_target_id = nod.nid');
  $query->condition('n.status', 1)
        //->condition('n.type', 'compromiso_de_gestion', 'IN')
        ->condition('meta.field_meta_target_id', $meta_id);

  return $query->execute()->fetchAll();
}

function auto_compromiso_form_title($user, &$form, &$form_state) {
  $ins_nid = field_target_id($user->field_institucion, 0);

  $ins = node_load($ins_nid);
  $form['field_institucion']['#disabled'] = TRUE;
  $form['field_institucion'][LANGUAGE_NONE][0]['target_id']['#default_value'] = t('@institution (@nid)', array('@institution' => $ins->title, '@nid' => $ins_nid));
  $form_state['values']['field_institucion'][LANGUAGE_NONE][0]['target_id'] = $ins_nid;
  $form['title']['#default_value'] = date('Y').'-'.$ins->title;
}

function clone_group($group_items){
  $new_group = new stdClass();
  $new_group->identifier = $group_items->identifier;
  $new_group->group_name = $group_items->group_name;
  $new_group->entity_type = $group_items->entity_type;
  $new_group->bundle = $group_items->bundle;
  $new_group->mode = $group_items->mode;
  $new_group->parent_name = $group_items->parent_name;
  $new_group->table = $group_items->table;
  $new_group->type = $group_items->type;
  $new_group->export_type = $group_items->export_type;
  $new_group->disabled = $group_items->disabled;
  $new_group->label = $group_items->label;
  $new_group->weight = $group_items->weight;
  $new_group->children = $group_items->children;
  $new_group->format_type = $group_items->format_type;
  $new_group->format_settings = $group_items->format_settings;

  return $new_group;
}

function is_add_form($form_state){
  return !isset($form_state['node']->nid);
}

function action_default_value($item_id, $action_id, $form) {
  $item_entity = $form['field_item_compromiso'][LANGUAGE_NONE][$item_id]['#entity'];
  $eje =  !empty($item_entity->field_codigo_eje) ? $item_entity->field_codigo_eje[LANGUAGE_NONE][0]['tid'] : '0';
  $ambito = !empty($item_entity->field_codigo_ambito) ? $item_entity->field_codigo_ambito[LANGUAGE_NONE][0]['tid']  :'0';
  $lineamiento = !empty($item_entity->field_codigo_lineamiento) ? $item_entity->field_codigo_lineamiento[LANGUAGE_NONE][0]['tid'] : '0';
  
  $cod_eje = taxonomy_term_load($eje);
  $cod_ambito = taxonomy_term_load($ambito);
  $cod_lineamiento = taxonomy_term_load($lineamiento);
  
  return 'E'. $cod_eje->field_auto_inc_eje['und'][0]['value'] . '-A' . $cod_ambito->field_auto_inc_ambito['und'][0]['value'] . '.L' . $cod_lineamiento->field_auto_inc_lin['und'][0]['value'] . '.Ae' . ($action_id + 1);
}

function meta_callback($form, $form_state) {
  return $form['field_item_de_compromiso'][LANGUAGE_NONE][0]['field_accion_collect'][LANGUAGE_NONE][0]['field_meta'][LANGUAGE_NONE]['form']['title']['value'];
}

function generate_action_code($item_id, $action_id, $form) {
    
  $eje = !empty($form['field_item_compromiso'][LANGUAGE_NONE][$item_id]['field_codigo_eje'][LANGUAGE_NONE]['#default_value']) ?
    $form['field_item_compromiso'][LANGUAGE_NONE][$item_id]['field_codigo_eje'][LANGUAGE_NONE]['#default_value'][0] : '0';
  $ambito = !empty($form['field_item_compromiso'][LANGUAGE_NONE][$item_id]['field_codigo_ambito'][LANGUAGE_NONE]['#default_value']) ?
    $form['field_item_compromiso'][LANGUAGE_NONE][$item_id]['field_codigo_ambito'][LANGUAGE_NONE]['#default_value'][0] : '0';
  $lineamiento = !empty($form['field_item_compromiso'][LANGUAGE_NONE][$item_id]['field_codigo_lineamiento'][LANGUAGE_NONE]['#default_value']) ?
    $form['field_item_compromiso'][LANGUAGE_NONE][$item_id]['field_codigo_lineamiento'][LANGUAGE_NONE]['#default_value'][0] : '0';
  
      $cod_eje = taxonomy_term_load($eje);
      $cod_ambito = taxonomy_term_load($ambito);
      $cod_lineamiento = taxonomy_term_load($lineamiento);

  
      if ($cod_eje==null&&$cod_ambito==null&&$cod_lineamiento==null){
          return 'E#-A#.L#.Ac#';
      }
      else {
          return 'E'. $cod_eje->field_auto_inc_eje['und'][0]['value'] . '-A' . $cod_ambito->field_auto_inc_ambito['und'][0]['value'] . '.L' . $cod_lineamiento->field_auto_inc_lin['und'][0]['value'] . '.Ae' . ($action_id + 1);
      }
}

//Form ajax callback
function eal_ajax_callback($form, $form_state) {
  $commands = array();
  foreach($form['field_item_compromiso'][LANGUAGE_NONE] as $item_id => $item) {
    if(is_numeric($item_id)) {
      foreach ($item['field_accion_collect'][LANGUAGE_NONE] as $action_id => $action) {
        if (is_numeric($action_id)) {
          $commands[] = ajax_command_replace("#item_". $item_id . "_codigo_accion_" . $action_id, drupal_render($action['field_codigo_accion_estrategica'][LANGUAGE_NONE][0]['value']));
          //$commands[] = ajax_command_replace('#item_' . $item_id . '_accion_meta_' . $action_id, drupal_render($action['field_meta'][LANGUAGE_NONE][0]['target_id']));
          $meta_array = array_filter($action['field_meta'][LANGUAGE_NONE], function ($k) { return is_numeric($k); },  ARRAY_FILTER_USE_KEY);
          foreach ($meta_array as $meta_id => $meta) {
            $commands[] = ajax_command_replace('#item_' . $item_id . '_accion_' . $action_id . '_meta_' . $meta_id, drupal_render($meta['target_id']));
            $accion['field_meta'][LANGUAGE_NONE][$meta_id] = $meta;
          }
        }
        $item['field_accion_collect'][LANGUAGE_NONE][$action_id] = $action;
      }
      $form['field_item_compromiso'][LANGUAGE_NONE][$item_id] = $item;
    }
  }
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

function method_1($form, $form_State) {
  return $form['field_item_compromiso']['und'][0]['field_accion_collect']['und'][0]['field_codigo_accion_estrategica']['und'][0]['value'];
}

function update_compromiso_de_gestion($node) {
  if(!isset($node->already_updated) || (isset($node->already_updated) && $node->already_updated)) {
    check_compromiso_id($node);
    action_id($node);
    update_percentage_compromiso($node);
    $node->is_new = FALSE;
    $node->already_updated = TRUE;
    field_attach_update('node', $node);
  }
}

function new_compromiso_id($node) {
  if($node->is_new) {
    if($node->field_id_compromiso) {
        $compromiso_title = get_last_compromiso_title();
      if($compromiso_title != NULL) {
          $splitted_title = explode('-', $compromiso_title);

          if ($splitted_title[1] != date('Y')) {
            autoinc_compromiso($node);

          } else {
            $id_compromiso = $splitted_title[0] + 1;
            $node->field_id_compromiso[LANGUAGE_NONE][0]["value"] = $id_compromiso;
            $ins = !empty($node->field_institucion[LANGUAGE_NONE]) ? node_load(field_target_id($node->field_institucion, 0)) : NULL;
            $ins_name = $ins ? $ins->title : '';
            $year = explode("-", $node->field_year_compromiso[LANGUAGE_NONE][0]['value'])[0];
            $node->title = $id_compromiso . '-' . $year . '-' . $ins_name;
          }
        } else {
          autoinc_compromiso($node);
        }
        /*$splitted_title = explode('-', $compromiso_title);

        if ($splitted_title[1] != date('Y')) {
            autoinc_compromiso($node);

        } else {
          if ($count == NULL) {

            autoinc_compromiso($node);

          }
          else {

            $node->field_id_compromiso[LANGUAGE_NONE][0]["value"] = ++$count;

            $ins = !empty($node->field_institucion[LANGUAGE_NONE]) ? node_load(field_target_id($node->field_institucion, 0)) : NULL;

            $ins_name = $ins ? $ins->title : '';
            $year = explode("-", $node->field_year_compromiso[LANGUAGE_NONE][0]['value'])[0];
            $node->title = $count . '-' . $year . '-' . $ins_name;
          }
        }*/
    }
  }
}

function check_compromiso_id($node) {
  $ins = !empty($node->field_institucion) ? node_load(field_target_id($node->field_institucion, 0)) : null;
  $xploded_title = explode('-', $node->title);
  $xploded_title[2] = $ins->title;
  $node->title = $xploded_title[0].'-'.$xploded_title[1].'-'.$xploded_title[2];
}

function update_percentage_compromiso($compromiso_node) {
  $percent = compromiso_percentage($compromiso_node);
  $compromiso_node->field_porcentaje_de_avance_compr = simple_string_field_value($percent);
}

function get_last_compromiso_title() {
  $query_id_compromiso = db_select('field_data_field_id_compromiso', 'comp');
  $query_id_compromiso->fields('comp', array('field_id_compromiso_value'));
  $query_id_compromiso->orderBy('entity_id', 'DESC');
  $query_id_compromiso->range(0, 1);
  $count = $query_id_compromiso->execute()->fetchField();

  $query_node_title = db_select('node');
  $query_node_title->addExpression('MAX(nid)');
  $query_node_title->condition('type', 'compromiso_de_gestion', '=');
  $executed_query=$query_node_title->execute()->fetchField();
  $node_loaded_with_id = node_load($executed_query);

  return $count != NULL ? $node_loaded_with_id->title : NULL;
}

function autoinc_compromiso($node){
    $node->field_id_compromiso[LANGUAGE_NONE][0]["value"] = 1;
    $id = $node->field_id_compromiso[LANGUAGE_NONE][0]["value"];
    $ins = node_load(field_target_id($node->field_institucion, 0));
    $node->title = $id . '-' . date('Y') . '-' . $ins->title;
}

function action_id($compromiso_node) {
  foreach($compromiso_node->field_item_compromiso[LANGUAGE_NONE] as $item_id) {
    $item = field_collection_item_load($item_id['value']);
    if($item) {
      $eje = !empty($item->field_codigo_eje) ? taxonomy_term_load($item->field_codigo_eje[LANGUAGE_NONE][0]['tid']) : FALSE;
      $ambito = !empty($item->field_codigo_ambito) ? taxonomy_term_load($item->field_codigo_ambito[LANGUAGE_NONE][0]['tid']) : FALSE;
      $lineamiento = !empty($item->field_codigo_lineamiento) ? taxonomy_term_load($item->field_codigo_lineamiento[LANGUAGE_NONE][0]['tid']) : FALSE;

      $cod_eje = $eje ? $eje->field_auto_inc_eje['und'][0]['value'] : '';
      $cod_ambito = $ambito ? $ambito->field_auto_inc_ambito['und'][0]['value'] : '';
      $cod_lineamiento = $lineamiento ? $lineamiento->field_auto_inc_lin['und'][0]['value'] : '';

      foreach($item->field_accion_collect[LANGUAGE_NONE] as $action_key => $action_id) {
        $action = field_collection_item_load($action_id['value']);
        if($action) {
          if ($action->field_nombre_manual[LANGUAGE_NONE][0]['value'] > 0) {
            $action->field_codigo_accion_estrategica[LANGUAGE_NONE][0]['value'] = 'E' . $cod_eje . '-A' . $cod_ambito . '.L' . $cod_lineamiento . '.Ae' . ($action_key + 1);
          }
          if(!empty($action->field_meta)) {
            foreach ($action->field_meta[LANGUAGE_NONE] as $meta_id => $meta) {
              meta_id($meta_id, $meta['target_id'], $action->field_codigo_accion_estrategica[LANGUAGE_NONE][0]['value']);
            }
          }
          $action->save(TRUE);
        }
      }
    }
  }
}

function meta_id($meta_id, $meta_nid, $action_id){
  $meta = node_load($meta_nid);
  $meta->field_meta_codigo = simple_string_field_value($action_id . '.(M' . ($meta_id + 1) . ')');
  $meta->revision = 1;
  node_save($meta);
  if(!empty($meta->field_producto)) {
    foreach ($meta->field_producto[LANGUAGE_NONE] as $key => $productos) {
      producto_id($meta, $productos['target_id'], ($key + 1));
    }
  }
}

function producto_id($meta_node, $producto_nid, $producto_id){
  $producto = node_load($producto_nid);
  if(!$producto->field_nombre_manual[LANGUAGE_NONE][0]['value'] > 0) {
    $producto->field_cod_producto_meta = simple_string_field_value(field_value($meta_node->field_meta_codigo, 0) .  '.P' . $producto_id);
    $producto->revision = 1;
    node_save($producto);
  }
}

function compromiso_percentage($compromis_node) {
  if(!empty($compromis_node->field_item_compromiso)) {
    $total = 0;
    $cant = 0;
    foreach ($compromis_node->field_item_compromiso[LANGUAGE_NONE] as $item) {
      $item_collect = field_collection_item_load($item['value']);
      if(!empty($item_collect->field_accion_collect)) {
        foreach ($item_collect->field_accion_collect[LANGUAGE_NONE] as $action) {
          $action_collect = field_collection_item_load($action['value']);
          if(!empty($action_collect->field_meta)) {
            $metas = array_filter($action_collect->field_meta[LANGUAGE_NONE], function ($v, $k) {
              return is_numeric($k) && !empty($v['target_id']);
            }, ARRAY_FILTER_USE_BOTH);
            $cant += sizeof($metas);
            foreach ($metas as $meta) {
              $meta_node = node_load($meta['target_id']);
              $total += empty($meta_node->field_porcentaje_avance) ? 1 : $meta_node->field_porcentaje_avance[LANGUAGE_NONE][0]['value'] ;
            }
          }
        }
      }
    }
    return $cant > 0 ? (($total - $cant) * 25) /$cant : 0;
  }
  return 0;
}

function simple_string_field_value($value) {
  return array(
    LANGUAGE_NONE => array(
      0 => array(
        'value' => $value,
        'format' => NULL,
        'safe_value' => $value,
      ),
    ),
  );
}

function field_target_id(&$array, $id) {
  return $array[LANGUAGE_NONE][$id]['target_id'];
}

function field_value(&$array, $id) {
  return $array[LANGUAGE_NONE][$id]['value'];
}


